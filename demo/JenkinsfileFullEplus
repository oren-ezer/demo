import groovy.json.JsonOutput

properties(
    [
        parameters(
            [
                string(name: 'distributionUrl',defaultValue: 'https://distribution-orendemo.jfrogdev.co', description: 'Distribution server URL')
            ]
        )
    ]
)

timestamps {

//    node('generic') {
    node {

        def server
        def rtFullUrl
        def rtIpAddress
        def buildNumber
        def mavenBuildName
        def dockerBuildName
        def buildInfo
        def stagingPromotionRepo = 'myteam-maven-stage-local'
        def prodPromotionRepo = 'myteam-maven-prod-local'
        def distributionUrl = params.distributionUrl
        def releaseBundleName = 'myteam-project-bundle'
        def pipelineUtils
        def artifactoryCredentialId = 'orendemo_login'

        stage("checkout") {
            checkout scm
            buildNumber = env.BUILD_NUMBER
            def jobName = env.JOB_NAME

            echo '==================='
            echo 'pwd:'
            sh 'pwd'
            echo 'ls:'
            sh "ls -la"
            echo "build number: ${buildNumber}"
            echo "job name: ${jobName}"
            echo "==================="

            mavenBuildName = "maven-${jobName}"
            dockerBuildName = "docker-${jobName}"
            server = Artifactory.server "oren_remote"
            rtFullUrl = server.url      
            rtIpAddress = rtFullUrl - ~/^http?.:\/\// - ~/\/artifactory$/
            pipelineUtils = load 'demo/pipelineUtils.groovy'
        }

        stage("Build+Deploy") {
            def rtMaven = Artifactory.newMavenBuild()
            rtMaven.deployer server: server, releaseRepo: 'myteam-maven-dev-local', snapshotRepo: 'myteam-maven-dev-local'
            rtMaven.tool = 'mavenTool'
            String mvnGoals = "-B clean install -DartifactVersion=${buildNumber} -s demo/settings.xml"
            buildInfo = Artifactory.newBuildInfo()
            buildInfo.name = mavenBuildName
            buildInfo.env.collect()
            rtMaven.run pom: 'demo/pomForEplus.xml', goals: mvnGoals, buildInfo: buildInfo
            server.publishBuildInfo buildInfo
        }

        stage("static code analysis") {


        }

        stage("Promote to stage") {

            def promotionConfig = [
                    'buildName'  : buildInfo.name,
                    'buildNumber': buildInfo.number,
                    'targetRepo' : stagingPromotionRepo,
                    'comment'    : 'This is a stable java-project version',
                    'status'     : 'Released',
                    'sourceRepo' : 'myteam-maven-dev-local',
                    'copy'       : true,
                    'failFast'   : true
            ]

            server.promote promotionConfig

        }

        stage("Scan") {

            def scanConfig = [
                    'buildName'  : buildInfo.name,
                    'buildNumber': buildInfo.number,
                    'failBuild'  : true
            ]
            server.xrayScan scanConfig
        }

        stage("Promote to prod") {

            def promotionConfig = [
                    'buildName'  : buildInfo.name,
                    'buildNumber': buildInfo.number,
                    'targetRepo' : prodPromotionRepo,
                    'comment'    : 'This is a release ready java-project version',
                    'status'     : 'Scanned',
                    'sourceRepo' : 'myteam-maven-stage-local',
                    'copy'       : true,
                    'failFast'   : true
            ]

            server.promote promotionConfig

        }
/*  
        stage("Build docker image") {
            def dockerBuildInfo = Artifactory.newBuildInfo()
            dockerBuildInfo.name = dockerBuildName
            def downloadSpec = """{
             "files": [
              {
                  "pattern": "myteam-maven-dev-local/com/myjfrog/demo/${buildNumber}-SNAPSHOT/demo-*.jar",
                  "target": "/myzips/downloads/",
                  "flat": "true"
                }
             ]
            }"""

            server.download spec: downloadSpec, buildInfo: dockerBuildInfo
            def rtDocker = Artifactory.docker server: server


            echo '==================='
            echo 'pwd:'
            sh 'pwd'
            echo 'ls:'
            sh "ls -la /myzips/downloads"
            echo "===================${rtIpAddress}"

            
            def dockerImageTag = "${rtIpAddress}/docker:${buildNumber}"
            docker.build(dockerImageTag, "-f demo/Dockerfile --build-arg DOCKER_REGISTRY_URL=${rtIpAddress} .")
            dockerBuildInfo.env.collect()
            rtDocker.push(dockerImageTag, 'docker', dockerBuildInfo)
            server.publishBuildInfo dockerBuildInfo
        }
*/
/*
        stage("Scan docker image") {
            
            def dockerScanConfig = [
                    'buildName'  : dockerBuildInfo.name,
                    'buildNumber': dockerBuildInfo.number,
                    'failBuild'  : true
            ]
            server.xrayScan dockerScanConfig
        }
*/        
/*
        stage("Promote docker image") {

            def dockerPromotionConfig = [
                    'buildName'  : dockerBuildInfo.name,
                    'buildNumber': dockerBuildInfo.number,
                    'targetRepo' : 'stable-docker-repo',
                    'comment'    : 'This is a stable java-project docker image',
                    'status'     : 'Released',
                    'sourceRepo' : 'docker-repo',
                    'copy'       : true,
                    'failFast'   : true
            ]

            server.promote dockerPromotionConfig
 
        }
*/        
//*
        stage("Create release bundle") {
            rtServiceId = pipelineUtils.restGet("${rtFullUrl}/api/system/service_id", artifactoryCredentialId)


            // def aqlQuery = 'items.find({"repo":{"$match":"myteam-*-prod-local"}})'
            def aqlQuery = 'items.find( { "$and":[ { "repo":{"$match":"myteam-*-prod-local"} }, { "@build.number":"${buildNumber}" } ] } )'
/*
      def aqlQuery = """
        items.find(
            {
                \"repo\":{
                    \"\$match\":\"myteam-*-prod-local\"
                }
            }
        )
      """
*/
/*
            def aqlQuery = """
            items.find({
                \"\$and\": [
                        {
                            \"repo\": {
                            \"\$match\": \"myteam-maven-prod-repo\"
                        }
                        },
                        {
                            \"\$or\": [
                                {
                                    \"@build.name\": \"${mavenBuildName}\"
                                },
                                {
                                    \"@build.name\": \"${dockerBuildName}\"
                                }
                        ]
                        },
                        {
                            \"@build.number\": \"${buildNumber}\"
                        }
                ]
            })
            """.replaceAll(" ", "").replaceAll("\n", "")
*/

            def releaseBundleBody = [
                    'name': "${releaseBundleName}",
                    'version': "${buildNumber}",
                    'dry_run': false,
                    'sign_immediately': true,
                    'description': 'Release bundle for the example java-project',
                    'release_notes': [
                        'syntax': "plain_text",
                        'content': "my release notes are very important"
                    ],
                    'spec': [
                            'source_artifactory_id': "${rtServiceId}",
                            'queries': [
                                    [
                                            'aql': "${aqlQuery}",
                                            'query_name': 'java-project-query'
                                    ]
                            ]
                    ]
            ]

            releaseBundleBodyJson = JsonOutput.toJson(releaseBundleBody)
//echo "===========after JSON creation============="

//echo "${releaseBundleBodyJson}"

//echo "===========after JSON output============="
            res = pipelineUtils.restPost("${distributionUrl}/api/v1/release_bundle", artifactoryCredentialId, releaseBundleBodyJson)
 //echo "===========after rest call============="
       }
//*/
/*
        stage('Distribute release bundle') {
            def distributeReleaseBundleBody = readJSON file: 'distribute-release-bundle-body.json'
            res = pipelineUtils.restPost("${distributionUrl}/api/v1/distribution/${releaseBundleName}/${buildNumber}", artifactoryCredentialId, distributeReleaseBundleBody.toString())

            for (i = 0; true; i++) {
                res = pipelineUtils.restGet("${distributionUrl}/api/v1/release_bundle/${releaseBundleName}/${buildNumber}/distribution", artifactoryCredentialId)

                def jsonResult = readJSON text: res
                def distributionStatus = jsonResult.status.unique()
                distributionStatus = distributionStatus.collect { it.toUpperCase() }
                println "Current status:  ${distributionStatus}"

                if (distributionStatus == ['COMPLETED']) {
                    println "Distribution finished successfully"
                    break
                } else if (distributionStatus.contains('FAILED')) {
                    error("Distribution failed. Response body: ${jsonResult}")
                } else if (i >= 30) {
                    error("Timed out waiting for distribution to complete")
                }

                sleep 2

            }
        }
*/        
    }
}