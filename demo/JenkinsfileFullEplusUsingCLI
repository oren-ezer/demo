import groovy.json.JsonOutput

properties(
    [
        parameters(
            [
                string(name: 'distributionUrl',defaultValue: 'https://distribution-orendemo.jfrogdev.co', description: 'Distribution server URL'),
                string(name: 'releaseBundleName',defaultValue: 'myteam-project-bundle', description: 'release bundle name for distribution')
            ]
        )
    ]
)

timestamps {

    node {

        def rtFullUrl
        def buildNumber
        def buildName
        def buildInfo
        def devRepo = 'myteam-maven-dev-local'
        def stagingPromotionRepo = 'myteam-maven-stage-local'
        def prodPromotionRepo = 'myteam-maven-prod-local'
        def distributionUrl = params.distributionUrl
        def releaseBundleName = params.releaseBundleName
        def pipelineUtils
        def artifactoryCredentialId = 'orendemo_login'




        stage("install CLI") {
            //this stage can be ran only once for jfrog CLI download and installation but no harm like this
            echo "===============before downloading jfrog cli===================="
            sh 'pwd'
            sh 'curl -fL https://getcli.jfrog.io | sh'
            sh "ls -la"
            sh "chmod +x ./jfrog"
            echo "===============after downloading jfrog cli===================="
        }


        stage("checkout") {
            checkout scm
        }

        stage("preparations") {
            buildNumber = env.BUILD_NUMBER
            def jobName = env.JOB_NAME

            echo '==================='
            echo 'pwd:'
            sh 'pwd'
            echo 'ls:'
            sh "ls -la"
            echo "build number: ${buildNumber}"
            echo "job name: ${jobName}"
            echo "==================="

            buildName = "maven-${jobName}"
            def server = Artifactory.server "oren_remote"
            rtFullUrl = server.url      
            pipelineUtils = load 'demo/pipelineUtils.groovy'
        }

        stage("create build context") {
            sh "./jfrog rt bce ${buildName} ${buildNumber}"
        }

        stage("maven build") {
            //aquiring M2_HOME for 'jfrog rt mvn' command
            env.M2_HOME= tool "mavenTool"
            echo "=====================M2_HOME================"
            echo env.M2_HOME
 
            //creating the config file
            sh "echo 'version: 1\ntype: maven\nresolver:\n  snapshotRepo: jcenter\n  releaseRepo: jcenter\n  serverID: oren_remote\ndeployer:\n  snapshotRepo: ${devRepo}\n  releaseRepo: myteam-${devRepo}\n  serverID: oren_remote' > ./config.txt"
            sh 'cat ./config.txt'

            //executing the build with the config file
            echo '==============setting artifactory config==============='
            sh './jfrog rt c --interactive=false --url=https://artifactory-orendemo.jfrogdev.co/artifactory/ --user=admin --password=password oren_remote'

            echo '==============maven build starting==============='
            sh "./jfrog rt mvn 'clean install -f ./demo/pomForEplusUsingCLI.xml -DskipTests -DartifactVersion=${buildNumber}' ./config.txt --build-name=${buildName} --build-number=${buildNumber}"
        }

        stage("Publish") {
            //publish the build info including the enviroment info
            sh "./jfrog rt bp ${buildName} ${buildNumber}"  
        }

        stage("static code analysis") {
            //generate sleeping time between 2 to 7 seconds
            def sleepingTime = Math.abs(new Random().nextInt() % ([7] - [2])) + [2]
            sleep(sleepingTime)
        }

        stage("Promote to stage") {
            sh "./jfrog rt bpr ${buildName} ${buildNumber} ${stagingPromotionRepo} --comment='This is a stable java-project version' --status='Released' --source-repo=${devRepo} --copy=true"
        }

        stage("Scan") {
            sh "./jfrog rt bs ${buildName} ${buildNumber}"
        }

        stage("Promote to prod") {
            sh "./jfrog rt bpr ${buildName} ${buildNumber} ${prodPromotionRepo} --comment='This is a release ready java-project version' --status='Scanned' --source-repo=${stagingPromotionRepo} --copy=true"
        }

        stage("Create release bundle") {
            rtServiceId = c.restGet("${rtFullUrl}/api/system/service_id", artifactoryCredentialId)

            def aqlQuery = """
            items.find( 
                { \"\$and\":[ 
                    { \"repo\":
                        {\"\$match\":\"myteam-*-prod-local\"} 
                    }, 
                    { 
                        \"@build.number\":\"${buildNumber}\" 
                    } 
                ]} 
            )
            """
            aqlQuery = aqlQuery.replaceAll(" ", "").replaceAll("\n", "")

            def releaseBundleBody = [
                    'name': "${releaseBundleName}",
                    'version': "${buildNumber}",
                    'dry_run': false,
                    'sign_immediately': true,
                    'description': 'Release bundle for the example java-project',
                    'release_notes': [
                        'syntax': "plain_text",
                        'content': "myteam release notes are very important"
                    ],
                    'spec': [
                            'source_artifactory_id': "${rtServiceId}",
                            'queries': [
                                    [
                                            'aql': "${aqlQuery}",
                                            'query_name': 'java-project-query'
                                    ]
                            ]
                    ]
            ]

            releaseBundleBodyJson = JsonOutput.toJson(releaseBundleBody)
// echo "===========after JSON creation============="

// echo "${releaseBundleBodyJson}"

// echo "===========after JSON output============="
            res = pipelineUtils.restPost("${distributionUrl}/api/v1/release_bundle", artifactoryCredentialId, releaseBundleBodyJson)
 //echo "===========after rest call============="
       }


        stage('Distribute release bundle') {
            def distributeReleaseBundleBody = '{"dry_run": false, "distribution_rules": [{"service_name": "*edge*"}]}'
            res = pipelineUtils.restPost("${distributionUrl}/api/v1/distribution/${releaseBundleName}/${buildNumber}", artifactoryCredentialId, distributeReleaseBundleBody.toString())

            def jsonResult = readJSON text: res
            println "the result is: "
            println "${jsonResult}"                
        }  
            
    }  
}