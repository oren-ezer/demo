import groovy.json.JsonOutput

properties(
    [
        parameters(
            [
                string(name: 'distributionUrl',defaultValue: 'https://distribution-orendemo.jfrogdev.co', description: 'Distribution server URL'),
                string(name: 'releaseBundleName',defaultValue: 'myteam-project-bundle', description: 'release bundle name for distribution')
            ]
        )
    ]
)

timestamps {

    node {

        def server
        def rtFullUrl
        def rtIpAddress
        def buildNumber
        def buildName
        def buildInfo
        def stagingPromotionRepo = 'myteam-maven-stage-local'
        def prodPromotionRepo = 'myteam-maven-prod-local'
        def distributionUrl = params.distributionUrl
        def releaseBundleName = params.releaseBundleName
        def pipelineUtils
        def artifactoryCredentialId = 'orendemo_login'




        stage("install CLI") {
            //this stage can be ran only once for jfrog CLI download and installation but no harm like this
            echo "===============before downloading jfrog cli===================="
            sh 'pwd'
            sh 'curl -fL https://getcli.jfrog.io | sh'
            sh "ls -la"
            sh "chmod +x ./jfrog"
            echo "===============after downloading jfrog cli===================="
        }


        stage("checkout") {
            checkout scm
        }

        stage("preparations") {
            buildNumber = env.BUILD_NUMBER
            def jobName = env.JOB_NAME

            echo '==================='
            echo 'pwd:'
            sh 'pwd'
            echo 'ls:'
            sh "ls -la"
            echo "build number: ${buildNumber}"
            echo "job name: ${jobName}"
            echo "==================="

            buildName = "maven-${jobName}"
            server = Artifactory.server "oren_remote"
            rtFullUrl = server.url      
            rtIpAddress = rtFullUrl - ~/^http?.:\/\// - ~/\/artifactory$/
            pipelineUtils = load 'demo/pipelineUtils.groovy'
        }

        stage("create build context") {
            sh "./jfrog rt bce ${buildName} ${buildNumber}"
        }

/*
        stage("Build and Publish") {
            def rtMaven = Artifactory.newMavenBuild()
            rtMaven.deployer server: server, releaseRepo: 'myteam-maven-dev-local', snapshotRepo: 'myteam-maven-dev-local'
            rtMaven.tool = 'mavenTool'
            String mvnGoals = "-B clean install -DartifactVersion=${buildNumber} -s demo/settings.xml"
            buildInfo = Artifactory.newBuildInfo()
            buildInfo.name = buildName
            buildInfo.env.collect()
            rtMaven.run pom: 'demo/pomForEplus.xml', goals: mvnGoals, buildInfo: buildInfo
            server.publishBuildInfo buildInfo
        }

        stage("static code analysis") {
            //generate sleeping time between 2 to 7 seconds
            def sleepingTime = Math.abs(new Random().nextInt() % ([7] - [2])) + [2]
            sleep(sleepingTime)
        }

        stage("Promote to stage") {

            def promotionConfig = [
                    'buildName'  : buildInfo.name,
                    'buildNumber': buildInfo.number,
                    'targetRepo' : stagingPromotionRepo,
                    'comment'    : 'This is a stable java-project version',
                    'status'     : 'Released',
                    'sourceRepo' : 'myteam-maven-dev-local',
                    'copy'       : true,
                    'failFast'   : true
            ]

            server.promote promotionConfig

        }

        stage("Scan") {

            def scanConfig = [
                    'buildName'  : buildInfo.name,
                    'buildNumber': buildInfo.number,
                    'failBuild'  : true
            ]
            // server.xrayScan scanConfig
        }

        stage("Promote to prod") {

            def promotionConfig = [
                    'buildName'  : buildInfo.name,
                    'buildNumber': buildInfo.number,
                    'targetRepo' : prodPromotionRepo,
                    'comment'    : 'This is a release ready java-project version',
                    'status'     : 'Scanned',
                    'sourceRepo' : 'myteam-maven-stage-local',
                    'copy'       : true,
                    'failFast'   : true
            ]

            server.promote promotionConfig

        }

        stage("Create release bundle") {
            rtServiceId = pipelineUtils.restGet("${rtFullUrl}/api/system/service_id", artifactoryCredentialId)

            // def aqlQuery = 'items.find({"repo":{"$match":"myteam-*-prod-local"}})'
            // def aqlQuery = 'items.find( { "$and":[ { "repo":{"$match":"myteam-*-prod-local"} }, { "@build.number":"27" } ] } )'
            // def aqlQuery = """items.find( { \"\$and\":[ { \"repo\":{\"\$match\":\"myteam-*-prod-local\"} }, { \"@build.number\":\"${buildNumber}\" } ] } )"""
            def aqlQuery = """
            items.find( 
                { \"\$and\":[ 
                    { \"repo\":
                        {\"\$match\":\"myteam-*-prod-local\"} 
                    }, 
                    { 
                        \"@build.number\":\"${buildNumber}\" 
                    } 
                ]} 
            )
            """
            aqlQuery = aqlQuery.replaceAll(" ", "").replaceAll("\n", "")

            def releaseBundleBody = [
                    'name': "${releaseBundleName}",
                    'version': "${buildNumber}",
                    'dry_run': false,
                    'sign_immediately': true,
                    'description': 'Release bundle for the example java-project',
                    'release_notes': [
                        'syntax': "plain_text",
                        'content': "myteam release notes are very important"
                    ],
                    'spec': [
                            'source_artifactory_id': "${rtServiceId}",
                            'queries': [
                                    [
                                            'aql': "${aqlQuery}",
                                            'query_name': 'java-project-query'
                                    ]
                            ]
                    ]
            ]

            releaseBundleBodyJson = JsonOutput.toJson(releaseBundleBody)
// echo "===========after JSON creation============="

// echo "${releaseBundleBodyJson}"

// echo "===========after JSON output============="
            res = pipelineUtils.restPost("${distributionUrl}/api/v1/release_bundle", artifactoryCredentialId, releaseBundleBodyJson)
 //echo "===========after rest call============="
       }


        stage('Distribute release bundle') {
            def distributeReleaseBundleBody = '{"dry_run": false, "distribution_rules": [{"service_name": "*edge*"}]}'
            res = pipelineUtils.restPost("${distributionUrl}/api/v1/distribution/${releaseBundleName}/${buildNumber}", artifactoryCredentialId, distributeReleaseBundleBody.toString())

            def jsonResult = readJSON text: res
            println "the result is: "
            println "${jsonResult}"                
        }  
*/            
    }  
}