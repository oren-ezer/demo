echo '==============My Pipeline is starting ==============='

//need to run this only one time on Jenkins so the jfrog client will be downloaded

stage 'downloading jfrog cli '
node {
    sh 'pwd'
    sh 'curl -fL https://getcli.jfrog.io | sh'
    sh "ls -la"
    sh "chmod +x ./jfrog"
    sh "./jfrog rt bce myCliBuild 127"
}
echo '==============after downloading jfrog CLI==============='

echo '==============creating build context==============='
stage 'build ctx'
node {
sh "./jfrog rt bce myCliBuild 127"
}
echo '==============build context created==============='

echo '==============building with maven==============='
stage 'maven build'
node {

    /*
    // Advice: don't define M2_HOME in general. Maven will autodetect its root fine.
withEnv(["JAVA_HOME=${ tool 'jdk-1.8.0_64bits' }", "PATH+MAVEN=${tool 'maven-3.2.1'}/bin:${env.JAVA_HOME}/bin"]) {

    // Apache Maven related side notes:
    // --batch-mode : recommended in CI to inform maven to not run in interactive mode (less logs)
    // -V : strongly recommended in CI, will display the JDK and Maven versions in use.
    //      Very useful to be quickly sure the selected versions were the ones you think.
    // -U : force maven to update snapshots each time (default : once an hour, makes no sense in CI).
    // -Dsurefire.useFile=false : useful in CI. Displays test errors in the logs directly (instead of
    //                            having to crawl the workspace files to see the cause).
    sh "mvn --batch-mode -V -U -e clean deploy -Dsurefire.useFile=false"

}

    */

    env.M2_HOME= tool "dockerMaven"
    echo "=====================home================"
    echo env.M2_HOME
    echo "=====================home================"
git url: 'https://github.com/oren-ezer/demo.git'
// a temporary command just to find out where the file is
//  sh 'find -type f -name pomForDockerWithRemoteArti.xml
//creating the config file
sh 'echo "version: 1\ntype: maven\nresolver:\n  snapshotRepo: jcenter\n  releaseRepo: jcenter\n  serverID: oren_remote\ndeployer:\n  snapshotRepo: mylocalrepo\n  releaseRepo: mylocalrepo\n  serverID: oren_remote" > ./config.txt'
//executing the build with the config file
sh 'cat ./config.txt'

echo '==============setting artifactory config==============='
sh './jfrog rt c --interactive=false --url=https://artifactory-orendemo.jfrogdev.co/artifactory/ --user=oren --password=oren3927 oren_remote'

echo '==============maven build starting==============='
sh './jfrog rt mvn "clean install -f ./demo/pomForDockerWithRemoteArti.xml -DskipTests" ./config.txt --build-name=myCliBuild --build-number=127' 
//--url=https://artifactory-orendemo.jfrogdev.co/artifactory/ --user=oren --password=oren3927'
}
echo '==============maven build finished==============='
/*
echo '==============publishing build==============='
stage 'publish build'
node {
sh "./jfrog rt bp myCliBuild 127 --url=https://artifactory-orendemo.jfrogdev.co/artifactory/ --user=oren --password=oren3927"
}
echo '==============build published==============='

echo '==============downloading file==============='
stage 'downloading'
node {
sh './jfrog rt dl "mylocalrepo/*demo-0.0.1*.pom" "/myzips/" --build-name myCliBuild --build-number 127'
}
echo '==============finished dowloading==============='

echo '==============uploading file==============='
stage 'uploading'
node {
def date = new Date()
sh './jfrog rt u "/myzips/*.pom" "myUploadRepo" --props "source=test from my pipline;p2=v3" --build-name myCliBuild --build-number 127'
}
echo '==============finished uploading==============='

echo '==============publishing build==============='
stage 'publish build'
node {
sh "./jfrog rt bp myCliBuild 127 --url=https://artifactory-orendemo.jfrogdev.co/artifactory/ --user=oren --password=oren3927"
}
echo '==============build published==============='

echo '==============promoting build==============='
stage 'publish build'
node {
sh "./jfrog rt bpr myCliBuild 127 myPromotionRepo --url=https://artifactory-orendemo.jfrogdev.co/artifactory/ --user=oren --password=oren3927"
}
echo '==============build promoted==============='
echo '==============My Pipeline is finishing ==============='

*/
